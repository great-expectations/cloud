name: anthony-testing

on: [push, workflow_dispatch]
#    branches:
#      - main
#  schedule:
#    # Nightly build, midnight ET
#    # https://crontab.guru/#0_5_*_*_*
#    - cron:  '0 5 * * *'

jobs:
  anthony-testing:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache-dependency-path: poetry.lock

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-0 # increment to reset cache

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1

      - name: Print Version from pyproject.toml
        id: print_version
        run: echo $(poetry version -s)

      - name: Get Version from pyproject.toml
        id: get_version
        run: echo "POETRY_VERSION={$(poetry version -s)}" >> $GITHUB_OUTPUT

      - name: Display Version using vars from pyproject.toml
        id: display_version_from_vars
        run: echo greatexpectations/agent:${{ steps.get_version.outputs.POETRY_VERSION }},greatexpectations/agent:latest




#jobs:
#  containerize-agent:
#    runs-on: ubuntu-latest
#    permissions:
#      id-token: write
#      contents: read
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: "3.8"
#          cache-dependency-path: poetry.lock
#
#      - name: Load cached Poetry installation
#        id: cached-poetry
#        uses: actions/cache@v3
#        with:
#          path: ~/.local # the path depends on the OS
#          key: poetry-0 # increment to reset cache
#
#      - name: Install Poetry
#        if: steps.cached-poetry.outputs.cache-hit != 'true'
#        uses: snok/install-poetry@v1
#
#      - name: Install dependencies
#        run: poetry install --with dev,sql --sync
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Configure ECR AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-region: us-east-1
#          role-to-assume: arn:aws:iam::258143015559:role/github-amazonec2containerregistryreadonly
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      # Cannot multi arch build AND load
#      # https://github.com/docker/buildx/issues/59
#      - name: Build arm64, No Load, No Push
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          platforms: linux/arm64
#          push: false
#          load: false
#          tags: greatexpectations/agent:latest
#
#      # https://docs.docker.com/build/ci/github-actions/test-before-push/
#      - name: Build amd64, With Load, No Push
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          platforms: linux/amd64
#          push: false
#          load: true
#          tags: greatexpectations/agent:latest
#
#      - name: Smoke Test the Image
#        run: docker run --rm greatexpectations/agent:latest poetry run gx-agent -h
#
#      # Uses local image built in previous step
#      - name: Test New amd64 Agent Image
#        run: |
#          docker compose up db mq -d
#          docker compose run db-provisioner
#          docker compose run db-seeder
#          docker compose run mq-wait
#          docker compose up mercury-service-api -d
#          docker compose up gx-agent -d
#          poetry run pytest -m "agentjobs"
#        env:
#          GX_CLOUD_BASE_URL: ${{ vars.GX_CLOUD_BASE_URL }}
#          GX_CLOUD_ORGANIZATION_ID: ${{ secrets.GX_CLOUD_ORGANIZATION_ID }}
#          GX_CLOUD_ACCESS_TOKEN: ${{ secrets.GX_CLOUD_ACCESS_TOKEN }}
#          AUTH0_API_AUDIENCE: ${{ secrets.AUTH0_API_AUDIENCE }}
#          AUTH0_MERCURY_API_CLIENT_ID: ${{ secrets.AUTH0_MERCURY_API_CLIENT_ID }}
#          AUTH0_MERCURY_API_CLIENT_SECRET: ${{ secrets.AUTH0_MERCURY_API_CLIENT_SECRET }}
#          AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
#          GE_USAGE_STATISTICS_URL: ${{ secrets.GE_USAGE_STATISTICS_URL }}
#
#      - name: Get Version from pyproject.toml
#        id: get_version
#        run: echo ::set-output name=version::$(poetry version -s)
#
#      - name: Push to Docker Hub
#        uses: docker/build-push-action@v4
#        with:
#          context: .
#          platforms: linux/amd64,linux/arm64
#          push: true
#          tags: greatexpectations/agent:${{ steps.vars.outputs.get_version }},greatexpectations/agent:latest
#
#      - name: Show logs, if failure
#        if: failure()
#        run: docker compose logs
