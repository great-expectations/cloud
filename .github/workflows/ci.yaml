name: ci

on:
  pull_request:
  schedule:
    - cron: "0 */2 * * *"

jobs:

  check-if-agent-changed:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'schedule' }}
    outputs:
      agent_changed: ${{ steps.filter.outputs.agent }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            agent:
              - 'great_expectations_cloud/agent/**'


  check-version-is-bumped:
    # This job checks that the version in the PR is different from the version in main if the agent has changed.
    needs: check-if-agent-changed
    runs-on: ubuntu-latest
    if: ${{ needs.check-if-agent-changed.outputs.agent_changed == 'true' && github.event_name != 'schedule' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache-dependency-path: poetry.lock

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-0 # increment to reset cache

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1

      - name: Get version from pyproject.toml for PR
        id: pr_version
        run: echo "VERSION=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Checkout `main` branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Get version from pyproject.toml for main
        id: main_version
        run: echo "VERSION=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Check version in PR is not the same as in main
        if: ${{ steps.pr_version.outputs.VERSION == steps.main_version.outputs.VERSION }}
        run: |
          echo "Version in PR is the same as in main. Please bump the version in pyproject.toml."
          exit 1

  static-analysis:
    strategy:
      matrix:
        task: ["lint", "fmt", "type-check", "python-build", "docker"]
      fail-fast: false
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache-dependency-path: poetry.lock

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-3.8 # increment to reset cache

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --sync

      - run: poetry run invoke ${{ matrix.task }} --check

  tests:
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache-dependency-path: poetry.lock

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-${{ matrix.python-version  }} # increment to reset cache

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --sync

      - name: Run tests
        run: poetry run pytest -m "not agentjobs" --cov-report xml

      # upload coverage report to coveralls
      - run: poetry run coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.python-version }}
          COVERALLS_PARALLEL: true

  coveralls:
    name: Upload to coveralls.io
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache-dependency-path: poetry.lock

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-dev0 # increment to reset cache

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --sync  --only dev

      - name: Upload
        run: poetry run coveralls --service=github --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  codecov:
    name: Upload to codecov.io
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache-dependency-path: poetry.lock

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-dev0 # increment to reset cache

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --sync  --only dev

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: great-expectations/cloud
