name: ci

on: [push, workflow_dispatch]
#on:
#  pull_request:
#  schedule:
#    - cron: "0 */2 * * *"

jobs:

  anthony-test-check-version-bump:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache-dependency-path: poetry.lock

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-0 # increment to reset cache

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --sync

      - name: Get version from pyproject.toml for PR
        id: pr_version
        run: echo "VERSION=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Checkout `main` branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Get version from pyproject.toml for main
        id: main_version
        run: echo "VERSION=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Check version in PR is not the same as in main
        run: ${{ steps.pr_version.outputs.VERSION }} != ${{ steps.main_version.outputs.VERSION }}
#
#  static-analysis:
#    strategy:
#      matrix:
#        task: ["lint", "fmt", "type-check", "python-build", "docker"]
#      fail-fast: false
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: "3.8"
#          cache-dependency-path: poetry.lock
#
#      - name: Load cached Poetry installation
#        id: cached-poetry
#        uses: actions/cache@v3
#        with:
#          path: ~/.local # the path depends on the OS
#          key: poetry-3.8 # increment to reset cache
#
#      - name: Install Poetry
#        if: steps.cached-poetry.outputs.cache-hit != 'true'
#        uses: snok/install-poetry@v1
#
#      - name: Install dependencies
#        run: poetry install --sync
#
#      - run: poetry run invoke ${{ matrix.task }} --check
#
#  tests:
#    strategy:
#      matrix:
#        python-version: ["3.8", "3.9", "3.10", "3.11"]
#
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ matrix.python-version }}
#          cache-dependency-path: poetry.lock
#
#      - name: Load cached Poetry installation
#        id: cached-poetry
#        uses: actions/cache@v3
#        with:
#          path: ~/.local # the path depends on the OS
#          key: poetry-${{ matrix.python-version  }} # increment to reset cache
#
#      - name: Install Poetry
#        if: steps.cached-poetry.outputs.cache-hit != 'true'
#        uses: snok/install-poetry@v1
#
#      - name: Install dependencies
#        run: poetry install --sync
#
#      - name: Run tests
#        run: poetry run pytest -m "not agentjobs"
